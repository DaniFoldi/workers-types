---
import Layout from '../layouts/CodeLayout.astro'
import { readFile, readdir } from 'node:fs/promises'


export async function getStaticPaths(withFile = true): Promise<Array<{params: { date?: string}, props: { file: string }}>> {
  async function dtsPath(version: string, date: string): Promise<string> {
    return await readFile(new URL(`src/workers-types/${version}/package/${date}/index.d.ts`, getSrc()), 'utf8')
  }
  
  function getSrc(): URL {
    return new URL(`${import.meta.env.PROD ? '../' : ''}../../src`, import.meta.url)
  }

  const versions = await readdir(new URL('.', new URL(`src/workers-types/`, getSrc())))
  const pairs: Array<{ params: { date?: string }, props: { file: string } }> = []
  for (const version of versions) {
    const dates = (await readdir(new URL(`src/workers-types/${version}/package`, getSrc()), { withFileTypes: true }))
      .filter(dir => dir.isDirectory())
    for (const date of dates) {
      pairs.push({ params: { date: version + '/' + date.name }, props: { file: withFile ? await dtsPath(version, date.name) : '' }})
      /*if (date.name === 'experimental') {
        pairs.push({ params: { date: version }, props: { file: withFile ? await dtsPath(version, date.name) : '' }})
      }*/
      if (versions[versions.length - 1] === version) {
        pairs.push({ params: { date: date.name }, props: { file: withFile ? await dtsPath(version, date.name) : '' }})
      }
    }
    
    if (versions[versions.length - 1] === version) {
      pairs.push({ params: { date: undefined }, props: { file: withFile ? await dtsPath(version, 'experimental') : '' }})
    }
  }
  console.log(pairs.map(pair => pair.params))
  return pairs
}

const { date = 'latest/recommended' } = Astro.params
const { file } = Astro.props

const types = [...new Set((await getStaticPaths(false)).map(({ params }) => params.date))]
const availableVersions = [...new Set(types.map(version => version?.split('/')[0] ?? `latest (${types[types.length - 2]!.split('/')[0]})`))]
const dates = [...new Set(types.map(version => (version ?? 'latest/recommended').split('/'))
  .filter(version => version[0] ?? 'latest' === date.split('/')[0])
  .map(version => version[1] ?? `recommended`))].sort((a, b) => {
  if (a === 'oldest') return -1
  if (b === 'oldest') return 1
  if (a === 'recommended') return 1
  if (b === 'recommended') return -1
  if (a === 'experimental') return 1
  if (b === 'experimental') return -1
  return 0
})

type Token = {
  type: 'keyword' | 'punctuation' | 'identifier' | 'string' | 'number' | 'comment' | 'whitespace' | 'method' | 'type_identifier' | 'argument' | 'type'
  value: string
} & ({defining: true, id: string} | {defining?: false})

const tokens: Token[] = []
const definedTypes: string[] = []
const scope: string[] = []
let inFunction = 0

let index = 0

function continuesWith(value: boolean | string | string[], tokens?: string | string[]): boolean {
  if (typeof value === 'boolean') {
    if (Array.isArray(tokens)) {
      return tokens.some(v => continuesWith(v) && !file[index + v.length].match(/[a-zA-Z0-9_]/))
    } else {
      return tokens !== undefined && !file[index + tokens.length].match(/[a-zA-Z0-9_]/)
    }
  }
  if (Array.isArray(value)) {
    return value.some(v => continuesWith(v))
  }
  return file.slice(index, index + value.length) === value
}

function nextNonWhitespace(): string {
  let nextIndex = index
  while (file[nextIndex].match(/\s/)) {
    nextIndex++
  }
  return file[nextIndex]
}

function isDefined(type: string): string | false {
  const components = type.split('.')
  const identifier = components.pop()
  if (identifier && definedTypes.includes(identifier)) {
    return identifier
  }
  
  for (let i = 0; i < components.length; i++) {
    const component = components.slice(components.length - i).join('.')
    if (definedTypes.includes(`${component}.${identifier}`.replace(/^\./, ''))) {
      return `${component}.${identifier}`.replace(/^\./, '')
    }
  }
  return identifier && definedTypes.includes(identifier) ? identifier : false
}

function consumeWord(): string {
  const initialIndex = index
  while (file[index].match(/[a-zA-Z0-9_]/)) {
    index++
  }
  
  return file.slice(initialIndex, index)
}

function getScope() {
  let index = tokens.length - 1
  while (!tokens[index].defining) {
    index--
  }
  return tokens[index].value
}

function fromScope(scope: string[], word: string) {
  return `${scope.join('.')}.${word}`.replace(/^\./, '')
}

while (index < file.length) {
  const char = file[index]

  if (continuesWith([' ', '\t', '\n', '\r'])) {
    tokens.push({ type: 'whitespace', value: char })
    index++
    continue
  }

  if (continuesWith('//')) {
    let value = char
    index++

    while (file[index] !== '\n') {
      value += file[index]
      index++
    }

    tokens.push({ type: 'comment', value })
    continue
  }

  if (continuesWith('/*')) {
    let value = char
    index++

    while ((file[index] !== '*' || file[index + 1] !== '/') && index < file.length - 1) {
      value += file[index]
      index++
    }

    value += file[index]
    value += file[index + 1]
    index += 2

    tokens.push({ type: 'comment', value })
    continue
  }

  if (continuesWith(['\'', '"'])) {
    let value: string = char
    index++

    while (file[index] !== char) {
      value += file[index]
      index++
    }

    value += file[index]
    index++

    tokens.push({ type: 'string', value })
    continue
  }
  
  if (continuesWith(['(', ')', '{', '}', '[', ']', '<', '>', ',', '.', '?', ':', ';', '&', '|', '=', '+', '-', '*', '/', '%', '^', '!', '~', '@', '#', '$', '_', '`'])) {
    if (char === '{') {
      scope.push(getScope())
    } else if (char === '}') {
      scope.pop()
    }
    if (char === '(') {
      inFunction++
    } else if (char === ')') {
      inFunction--
    }
    tokens.push({ type: 'punctuation', value: char })
    index++
    continue
  }

  if (continuesWith(['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'])) {
    tokens.push({ type: 'number', value: consumeWord() })
    continue
  }
  
  if (continuesWith(true, ['string', 'number', 'boolean', 'void', 'Promise', 'Record', 'Array', 'Map', 'Set', 'Pick', 'Omit', 'any', 'unknown', 'void', 'never'])) {
    tokens.push({ type: 'type', value: consumeWord() })
    continue
  }
  
  if (continuesWith(true, ['true', 'false', 'null', 'undefined', 'async', 'function', 'declare', 'import', 'export', 'from', 'namespace', 'module', 'abstract', 'class', 'interface', 'type', 'extends', 'static', 'readonly', 'get', 'set', 'keyof', 'typeof', 'infer'])) {
    const word = consumeWord()
    if (!continuesWith(['(', '<'])) {
      tokens.push({ type: 'keyword', value: word })
      continue
    } else {
      index -= word.length
    }
  }
  
  if (continuesWith(true, ['as', 'in', 'is', 'new', 'instanceof', 'this', 'super', 'const', 'let', 'var', 'if', 'else', 'for', 'while', 'do', 'switch', 'case', 'break', 'continue', 'return', 'throw', 'try', 'catch', 'finally', 'with', 'debugger'])) {
    tokens.push({ type: 'keyword', value: consumeWord() })
    continue
  }
  
  const word = consumeWord()
  let type: Token['type'] = 'identifier'
  if (word) {
    if (['(', '<'].includes(nextNonWhitespace())) {
      type = 'method'
    }
    if ((word[0].match(/[A-Z]/) || tokens[tokens.length - 2].value === 'typeof') && nextNonWhitespace() !== ':') {
      type = 'type_identifier'
    }
    if (type === 'identifier' && inFunction > 0) {
      type = 'argument'
    }
    const defining = (type === 'type_identifier' && ['type', 'interface', 'namespace', 'module', 'class', 'const', 'readonly', 'static', 'let'].includes(tokens[tokens.length - 2].value))
    || (type === 'method')
    || (type === 'identifier' && inFunction === 0)
    if (defining) {
      definedTypes.push(fromScope(scope, word))
    }
    tokens.push({ type, value: word, id: fromScope(scope, word), defining })
    continue
  }
  break
}

const targetClasses = ["font-semibold", "scroll-mt-24", "relative",
  "target:ring-offset-4", "target:ring-2", "target:ring-slate-400",
  "target:outline-0", "target:ring-offset-gray-800"
]
---

<Layout>
  <div>
  <label>
    <span class="p-2">Version</span>
    <select class="pl-2 pr-8 py-1 rounded-md bg-slate-100 dark:bg-slate-700" id="version">
      {availableVersions.map(version => <option value={version.split(' ')[0]} selected={version.split(' ')[0] === date.split('/')[0]}>{version}</option>)}
    </select>
  </label>
  <label>
    <span class="p-2">Compatibility Date</span>
    <select class="pl-2 pr-8 py-1 rounded-md bg-slate-100 dark:bg-slate-700" id="compat-date">
      {dates
          .map(version => version === 'recommended' ? `recommended (${dates[dates.length - 3]})` : version)
          .map(version => <option value={version.split(' ')[0]} selected={version.split(' ')[0] === date.split('/')[1]}>{version}</option>)
      }
    </select>
  </label>
    <script is:inline>
      function getRedirect() {
        const url = new URL(window.location)
        url.pathname = [document.querySelector('#version').value.split(' ')[0].replace('latest', ''),
          document.querySelector('#compat-date').value.split(' ')[0].replace('recommended', '')]
          .join('/')
        return url
      }
      
      document.querySelector('#version').addEventListener('change', () => {
        location.assign(getRedirect())
      })
      
      document.querySelector('#compat-date').addEventListener('change', () => {
        location.assign(getRedirect())
      })
    </script>
    
    </div>
  <pre><code>{
        tokens.map(token => {
          switch (token.type) {
            case 'comment':
              if ((token.value.includes('\n') || token.value.length > 90) && (token.value.startsWith('/**') || token.value.startsWith('/*!'))) {
                const summary = token.value.replace(/^\/*[*! ]+/, '').trimLeft().split('\n')[0]
                return <details class="inline text-gray-500 group"><summary class="group-open:text-transparent marker:text-gray-100 ml-[-13px]">{summary}</summary>{token.value}</details>
              }
              return <span class="text-gray-500">{token.value}</span>
            case 'string':
              return <span class="text-amber-500">{token.value}</span>
            case 'whitespace':
              return <span>{token.value}</span>
            case 'punctuation':
              return <span class="text-slate-500">{token.value}</span>
            case 'keyword':
              return <span class="text-purple-500">{token.value}</span>
            case 'identifier':
              if (token.defining) {
                return <a tabindex="0" href={`#${token.id}`} id={token.id} class:list={targetClasses}><span class="text-emerald-500">{token.value}</span></a>
              } else {
                const type = isDefined('id' in token ? token.id as string : '')
                if (type) {
                  return <a tabindex="0" href={`#${type}`}><span class="text-emerald-500">{token.value}</span></a>
                } else {
                  return <span class="text-emerald-500">{token.value}</span>
                }
              }
            case 'argument':
              return <span class="text-fuchsia-500">{token.value}</span>
            case 'number':
              return <span class="text-red-500">{token.value}</span>
            case 'type':
              return <span class="text-indigo-500">{token.value}</span>
            case 'method':
              if (token.defining) {
                return <a tabindex="0" href={`#${token.id}`} id={token.id} class:list={targetClasses}><span class="text-teal-500">{token.value}</span></a>
              } else {
                const type = isDefined('id' in token ? token.id as string : '')
                if (type) {
                  return <a tabindex="0" href={`#${type}`}><span class="text-teal-500">{token.value}</span></a>
                } else {
                  return <span class="text-teal-500">{token.value}</span>
                }
              }
            case 'type_identifier':
              if (token.defining) {
                return <a tabindex="0" href={`#${token.id}`} id={token.id} class:list={targetClasses}><span class="text-blue-500">{token.value}</span></a>
              } else {
                const type = isDefined('id' in token ? token.id as string : '')
                if (type) {
                  return <a tabindex="0" href={`#${type}`}><span class="text-blue-500">{token.value}</span></a>
                } else {
                  return <span class="text-blue-500">{token.value}</span>
                }
              }
            default:
              return <span>{token.value}</span>
          }
        })
      }</code></pre>
</Layout>
